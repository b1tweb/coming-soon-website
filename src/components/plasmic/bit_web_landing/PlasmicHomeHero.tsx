// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5meqejXadBaiiJpUk3KBXy
// Component: cr5pXGhghf
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsdhNixrj8Z7R5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dhNixrj8Z7r5v/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bit_web_landing.module.css"; // plasmic-import: 5meqejXadBaiiJpUk3KBXy/projectcss
import sty from "./PlasmicHomeHero.module.css"; // plasmic-import: cr5pXGhghf/css

export type PlasmicHomeHero__VariantMembers = {};
export type PlasmicHomeHero__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomeHero__VariantsArgs;
export const PlasmicHomeHero__VariantProps = new Array<VariantPropType>();

export type PlasmicHomeHero__ArgsType = {};
type ArgPropType = keyof PlasmicHomeHero__ArgsType;
export const PlasmicHomeHero__ArgProps = new Array<ArgPropType>();

export type PlasmicHomeHero__OverridesType = {
  root?: p.Flex<"section">;
  heroTitle?: p.Flex<"h1">;
  heroDescription?: p.Flex<"h4">;
  heroDescriptionText?: p.Flex<"h4">;
};

export interface DefaultHomeHeroProps {
  className?: string;
}

function PlasmicHomeHero__RenderFunc(props: {
  variants: PlasmicHomeHero__VariantsArgs;
  args: PlasmicHomeHero__ArgsType;
  overrides: PlasmicHomeHero__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdhNixrj8Z7R5V()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <h1
        data-plasmic-name={"heroTitle"}
        data-plasmic-override={overrides.heroTitle}
        className={classNames(
          projectcss.all,
          projectcss.h1,
          projectcss.__wab_text,
          sty.heroTitle
        )}
      >
        {hasVariant(globalVariants, "screen", "mobileOnly")
          ? "it's a bit of a revolution."
          : "it's a bit of\na revolution."}
      </h1>

      <h4
        data-plasmic-name={"heroDescription"}
        data-plasmic-override={overrides.heroDescription}
        className={classNames(
          projectcss.all,
          projectcss.h4,
          projectcss.__wab_text,
          sty.heroDescription
        )}
      >
        <React.Fragment>
          <React.Fragment>{""}</React.Fragment>
          {
            <h4
              data-plasmic-name={"heroDescriptionText"}
              data-plasmic-override={overrides.heroDescriptionText}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.heroDescriptionText
              )}
            >
              {
                "BitWeb Is Web3's ultimate Layer 0, scaling a multichain to its physical limitations. BitWeb not only stores the entire state of every blockchain or multichain you care about - it will soon faciliate cross-chain communication across hundreds of blockchains, at millions of TPS."
              }
            </h4>
          }
          <React.Fragment>{""}</React.Fragment>
        </React.Fragment>
      </h4>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "heroTitle", "heroDescription", "heroDescriptionText"],
  heroTitle: ["heroTitle"],
  heroDescription: ["heroDescription", "heroDescriptionText"],
  heroDescriptionText: ["heroDescriptionText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  heroTitle: "h1";
  heroDescription: "h4";
  heroDescriptionText: "h4";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomeHero__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomeHero__VariantsArgs;
    args?: PlasmicHomeHero__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomeHero__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomeHero__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomeHero__ArgProps,
          internalVariantPropNames: PlasmicHomeHero__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomeHero__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomeHero";
  } else {
    func.displayName = `PlasmicHomeHero.${nodeName}`;
  }
  return func;
}

export const PlasmicHomeHero = Object.assign(
  // Top-level PlasmicHomeHero renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    heroTitle: makeNodeComponent("heroTitle"),
    heroDescription: makeNodeComponent("heroDescription"),
    heroDescriptionText: makeNodeComponent("heroDescriptionText"),

    // Metadata about props expected for PlasmicHomeHero
    internalVariantProps: PlasmicHomeHero__VariantProps,
    internalArgProps: PlasmicHomeHero__ArgProps
  }
);

export default PlasmicHomeHero;
/* prettier-ignore-end */
