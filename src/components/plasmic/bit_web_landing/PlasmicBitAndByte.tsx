// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5meqejXadBaiiJpUk3KBXy
// Component: 0uy3hUmqm-
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsdhNixrj8Z7R5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dhNixrj8Z7r5v/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bit_web_landing.module.css"; // plasmic-import: 5meqejXadBaiiJpUk3KBXy/projectcss
import sty from "./PlasmicBitAndByte.module.css"; // plasmic-import: 0uy3hUmqm-/css

import image3PIGnYl5E3 from "./images/image3.png"; // plasmic-import: pIGnYL5E3/picture
import image4GTZn6YArQ from "./images/image4.png"; // plasmic-import: gTZn6YArQ/picture

export type PlasmicBitAndByte__VariantMembers = {};
export type PlasmicBitAndByte__VariantsArgs = {};
type VariantPropType = keyof PlasmicBitAndByte__VariantsArgs;
export const PlasmicBitAndByte__VariantProps = new Array<VariantPropType>();

export type PlasmicBitAndByte__ArgsType = {};
type ArgPropType = keyof PlasmicBitAndByte__ArgsType;
export const PlasmicBitAndByte__ArgProps = new Array<ArgPropType>();

export type PlasmicBitAndByte__OverridesType = {
  root?: p.Flex<"section">;
  columns?: p.Flex<"div">;
};

export interface DefaultBitAndByteProps {
  className?: string;
}

function PlasmicBitAndByte__RenderFunc(props: {
  variants: PlasmicBitAndByte__VariantsArgs;
  args: PlasmicBitAndByte__ArgsType;
  overrides: PlasmicBitAndByte__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdhNixrj8Z7R5V()
  });

  return (
    <p.Stack
      as={"section"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
        <div
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          className={classNames(projectcss.all, sty.columns)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.column___8D5Wa)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__dvNol)}
                displayHeight={"443px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"630px" as const}
                loading={"lazy" as const}
                src={{
                  src: image3PIGnYl5E3,
                  fullWidth: 619,
                  fullHeight: 583,
                  aspectRatio: undefined
                }}
              />
            </div>
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.column__tvd1Y)}>
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__y3KAi)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? ("253px" as const)
                    : ("332px" as const)
                }
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"auto" as const}
                loading={"lazy" as const}
                src={{
                  src: image4GTZn6YArQ,
                  fullWidth: 461,
                  fullHeight: 405,
                  aspectRatio: undefined
                }}
              />
            </div>
          ) : null}
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "section";
  columns: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBitAndByte__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBitAndByte__VariantsArgs;
    args?: PlasmicBitAndByte__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBitAndByte__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicBitAndByte__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBitAndByte__ArgProps,
          internalVariantPropNames: PlasmicBitAndByte__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBitAndByte__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBitAndByte";
  } else {
    func.displayName = `PlasmicBitAndByte.${nodeName}`;
  }
  return func;
}

export const PlasmicBitAndByte = Object.assign(
  // Top-level PlasmicBitAndByte renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),

    // Metadata about props expected for PlasmicBitAndByte
    internalVariantProps: PlasmicBitAndByte__VariantProps,
    internalArgProps: PlasmicBitAndByte__ArgProps
  }
);

export default PlasmicBitAndByte;
/* prettier-ignore-end */
