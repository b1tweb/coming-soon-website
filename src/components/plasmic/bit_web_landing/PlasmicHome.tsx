// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5meqejXadBaiiJpUk3KBXy
// Component: EeRCGp3RXibo
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: mo-NtuCrSZ/component
import HomeHero from "../../HomeHero"; // plasmic-import: cr5pXGhghf/component
import HomeHeroButton from "../../HomeHeroButton"; // plasmic-import: _qICj0r55b2/component
import BitAndByte from "../../BitAndByte"; // plasmic-import: 0uy3hUmqm-/component

import { useScreenVariants as useScreenVariantsdhNixrj8Z7R5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: dhNixrj8Z7r5v/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_bit_web_landing.module.css"; // plasmic-import: 5meqejXadBaiiJpUk3KBXy/projectcss
import sty from "./PlasmicHome.module.css"; // plasmic-import: EeRCGp3RXibo/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: SB2JWCCB9Mk/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: OI1TqQabwyJ/icon
import image3PIGnYl5E3 from "./images/image3.png"; // plasmic-import: pIGnYL5E3/picture

export type PlasmicHome__VariantMembers = {};
export type PlasmicHome__VariantsArgs = {};
type VariantPropType = keyof PlasmicHome__VariantsArgs;
export const PlasmicHome__VariantProps = new Array<VariantPropType>();

export type PlasmicHome__ArgsType = {};
type ArgPropType = keyof PlasmicHome__ArgsType;
export const PlasmicHome__ArgProps = new Array<ArgPropType>();

export type PlasmicHome__OverridesType = {
  root?: p.Flex<"div">;
  byteMobile?: p.Flex<typeof p.PlasmicImg>;
  bitwebLogo?: p.Flex<typeof Header>;
  homeHero?: p.Flex<typeof HomeHero>;
  homeHeroButton?: p.Flex<typeof HomeHeroButton>;
  text?: p.Flex<"div">;
  bitAndByte?: p.Flex<typeof BitAndByte>;
};

export interface DefaultHomeProps {
  className?: string;
}

function PlasmicHome__RenderFunc(props: {
  variants: PlasmicHome__VariantsArgs;
  args: PlasmicHome__ArgsType;
  overrides: PlasmicHome__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdhNixrj8Z7R5V()
  });

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicImg
              data-plasmic-name={"byteMobile"}
              data-plasmic-override={overrides.byteMobile}
              alt={""}
              className={classNames(sty.byteMobile)}
              displayHeight={"381px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"none" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: image3PIGnYl5E3,
                fullWidth: 619,
                fullHeight: 583,
                aspectRatio: undefined
              }}
            />
          ) : null}

          <Header
            data-plasmic-name={"bitwebLogo"}
            data-plasmic-override={overrides.bitwebLogo}
            className={classNames("__wab_instance", sty.bitwebLogo)}
          />

          <HomeHero
            data-plasmic-name={"homeHero"}
            data-plasmic-override={overrides.homeHero}
            className={classNames("__wab_instance", sty.homeHero)}
          />

          <HomeHeroButton
            data-plasmic-name={"homeHeroButton"}
            data-plasmic-override={overrides.homeHeroButton}
            className={classNames("__wab_instance", sty.homeHeroButton)}
            link={"https://blog.bitweb.org" as const}
            showEndIcon={true}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"FOLLOW OUR DEVELOPMENT"}
            </div>
          </HomeHeroButton>

          <BitAndByte
            data-plasmic-name={"bitAndByte"}
            data-plasmic-override={overrides.bitAndByte}
            className={classNames("__wab_instance", sty.bitAndByte)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "byteMobile",
    "bitwebLogo",
    "homeHero",
    "homeHeroButton",
    "text",
    "bitAndByte"
  ],
  byteMobile: ["byteMobile"],
  bitwebLogo: ["bitwebLogo"],
  homeHero: ["homeHero"],
  homeHeroButton: ["homeHeroButton", "text"],
  text: ["text"],
  bitAndByte: ["bitAndByte"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  byteMobile: typeof p.PlasmicImg;
  bitwebLogo: typeof Header;
  homeHero: typeof HomeHero;
  homeHeroButton: typeof HomeHeroButton;
  text: "div";
  bitAndByte: typeof BitAndByte;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHome__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHome__VariantsArgs;
    args?: PlasmicHome__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHome__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHome__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHome__ArgProps,
          internalVariantPropNames: PlasmicHome__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHome__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHome";
  } else {
    func.displayName = `PlasmicHome.${nodeName}`;
  }
  return func;
}

export const PlasmicHome = Object.assign(
  // Top-level PlasmicHome renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    byteMobile: makeNodeComponent("byteMobile"),
    bitwebLogo: makeNodeComponent("bitwebLogo"),
    homeHero: makeNodeComponent("homeHero"),
    homeHeroButton: makeNodeComponent("homeHeroButton"),
    text: makeNodeComponent("text"),
    bitAndByte: makeNodeComponent("bitAndByte"),

    // Metadata about props expected for PlasmicHome
    internalVariantProps: PlasmicHome__VariantProps,
    internalArgProps: PlasmicHome__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "BitWeb | It's a bit of a revolution.",
      description: "",
      ogImageSrc: "",
      canonical: "https://bitweb.org"
    }
  }
);

export default PlasmicHome;
/* prettier-ignore-end */
